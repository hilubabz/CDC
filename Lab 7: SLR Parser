#include<bits/stdc++.h>

#define MAX_STACK 100

using namespace std;

typedef struct {
    int state;
    char symbol;
} StackElement;

typedef struct {
    char nonTerminal;
    const char *production;
    int length;
} Production;

StackElement parseStack[MAX_STACK];  // Renamed stack to parseStack
int top = -1;

Production productions[] = {
    {'S', "AA", 2},   // S -> AA  (production 0)
    {'A', "aA", 2},   // A -> aA  (production 1)
    {'A', "b", 1}     // A -> b   (production 2)
};

// Corrected ACTION table
const int ACTION[7][3] = {
    {2,  3,  0},  // State 0
    {0,  0,  1},  // State 1 (Accept)
    {2,  3,  0},  // State 2
    {0,  0,  -3}, // State 3 (Reduce A->b)
    {0,  0,  -1}, // State 4 (Reduce S->AA)
    {2,  3,  0},  // State 5
    {0,  0,  -2}  // State 6 (Reduce A->aA)
};

// Corrected GOTO table
const int GOTO[7][2] = {
    {4, 1}, // State 0
    {0, 0}, // State 1
    {6, 0}, // State 2
    {0, 0}, // State 3
    {0, 0}, // State 4
    {0, 0}, // State 5
    {0, 0}  // State 6
};

// Function to get the column index for the action table
int getColumnIndex(char input) {
    switch(input) {
        case 'a': return 0;
        case 'b': return 1;
        case '$': return 2;
        case 'A': return 0;
        case 'S': return 1;
        default: return -1;
    }
}

void push(int state, char symbol) {
    if (top >= MAX_STACK - 1) {
        cout << "Stack overflow\n";
        exit(1);
    }
    parseStack[++top] = {state, symbol};
}

void pop(int count) {
    top -= count;
    if (top < -1) {
        cout << "Stack underflow\n";
        exit(1);
    }
}

// Function to get the string representation of the stack for printing
string getStackString() {
    stringstream ss;
    for (int i = 0; i <= top; i++) {
        ss << "(" << parseStack[i].state << ", " << parseStack[i].symbol << ") ";
    }
    return ss.str();
}

void printTableHeader() {
    cout << "\nAction\tState\tSymbol\tNext State/Production\t\t\tStack\n";
    cout << "---------------------------------------------------------------\n";
}

int parse(const string &input) {
    int currentPos = 0;
    push(0, '$');
    printTableHeader();

    while (true) {
        char currentInput = input[currentPos];
        int currentState = parseStack[top].state;
        int col = getColumnIndex(currentInput);

        if (col == -1) {
            cout << "Invalid input symbol: " << currentInput << endl;
            return 0;
        }

        int action = ACTION[currentState][col];

        // Print action and stack state in table
        if (action == 1 && currentInput == '$') {
            printf("Accept\t\t\t\t\t\t\t\t\t\t\t\t\t\n");
            return 1;
        } else if (action > 0) {
            printf("Shift\t\t%d\t%c\t\t%d\t\t\t\t%s\n", currentState, currentInput, action, getStackString().c_str());
            push(action, currentInput);
            currentPos++;
        } else if (action < 0) {
            int productionIndex = -action - 1;
            Production &prod = productions[productionIndex];

            printf("Reduce\t\t%d\t%c\tby production %d\t\t\t%s\n", currentState, currentInput, productionIndex, getStackString().c_str());
            pop(prod.length);
            int newState = GOTO[parseStack[top].state][getColumnIndex(prod.nonTerminal)];
            printf("Goto\t\t\t\t\t\t\t%d\t\t\t\t%s\n", newState, getStackString().c_str());
            push(newState, prod.nonTerminal);
        } else {
            cout << "Syntax error at position " << currentPos << endl;
            return 0;
        }
    }
}

int main() {
    string input;
    cout << "Enter input string (end with $): ";
    cin >> input;

    if (parse(input)) {
        cout << "Parsing completed successfully\n";
    } else {
        cout << "Parsing failed\n";
    }

    return 0;
}
