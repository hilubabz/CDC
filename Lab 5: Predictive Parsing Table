#include <iostream>
#include <cstring>

using namespace std;

#define MAX_RULES 10
#define MAX_SYMBOLS 10
#define MAX_TERMINALS 10
#define MAX_NON_TERMINALS 10

// Grammar rules
char grammar[MAX_RULES][MAX_SYMBOLS];  

// FIRST and FOLLOW sets for each non-terminal
char first[MAX_NON_TERMINALS][MAX_TERMINALS];  
char follow[MAX_NON_TERMINALS][MAX_TERMINALS];

// Terminal and Non-Terminal arrays
char nonTerminals[MAX_NON_TERMINALS];
char terminals[MAX_TERMINALS];  // $ is the end-of-input marker

int ruleCount = 0;  // Number of grammar rules
int ntCount = 0;    // Number of non-terminals
int tCount = 0;     // Number of terminals

// Function to check if a character is a terminal
bool isTerminal(char ch) {
    return !(ch >= 'A' && ch <= 'Z');  // Terminals are lowercase or special symbols
}

// Function to add a character to a set (array)
void addToSet(char set[][MAX_TERMINALS], int index, char ch) {
    int i = 0;
    while (set[index][i] != '\0') {
        if (set[index][i] == ch) return; // Avoid duplicates
        i++;
    }
    set[index][i] = ch;
    set[index][i + 1] = '\0';
}

// Function to find the index of a non-terminal
int findIndex(char ch, char symbols[], int count) {
    for (int i = 0; i < count; i++) {
        if (symbols[i] == ch) return i;
    }
    return -1;
}

// Compute the FIRST sets
void computeFirst() {
    for (int i = 0; i < ntCount; i++) {
        char symbol = nonTerminals[i];
        for (int j = 0; j < ruleCount; j++) {
            if (grammar[j][0] == symbol) {
                // Look at the first symbol after the arrow "->"
                char firstSymbol = grammar[j][3]; // First symbol after "->"
                if (isTerminal(firstSymbol)) {
                    addToSet(first, i, firstSymbol);
                } else {
                    int idx = findIndex(firstSymbol, nonTerminals, ntCount);
                    for (int k = 0; first[idx][k] != '\0'; k++) {
                        addToSet(first, i, first[idx][k]);
                    }
                }
            }
        }
    }
}

// Compute the FOLLOW sets
void computeFollow() {
    follow[0][0] = '$'; // Start symbol FOLLOW set includes '$'
    follow[0][1] = '\0';

    for (int i = 0; i < ntCount; i++) {
        char symbol = nonTerminals[i];

        for (int j = 0; j < ruleCount; j++) {
            for (int k = 3; grammar[j][k] != '\0'; k++) {
                if (grammar[j][k] == symbol) {
                    if (grammar[j][k + 1] != '\0') {
                        char nextSymbol = grammar[j][k + 1];
                        if (isTerminal(nextSymbol)) {
                            addToSet(follow, i, nextSymbol);
                        } else {
                            int idx = findIndex(nextSymbol, nonTerminals, ntCount);
                            for (int m = 0; first[idx][m] != '\0'; m++) {
                                if (first[idx][m] != '#') {
                                    addToSet(follow, i, first[idx][m]);
                                }
                            }
                        }
                    } else {
                        int idx = findIndex(grammar[j][0], nonTerminals, ntCount);
                        for (int m = 0; follow[idx][m] != '\0'; m++) {
                            addToSet(follow, i, follow[idx][m]);
                        }
                    }
                }
            }
        }
    }
}

// Function to fill the Parsing Table
void fillParsingTable(char parsingTable[][MAX_TERMINALS][MAX_RULES]) {
    for (int i = 0; i < ntCount; i++) {
        for (int j = 0; j < ruleCount; j++) {
            if (grammar[j][0] == nonTerminals[i]) {
                char firstSymbol = grammar[j][3];
                int idx = findIndex(firstSymbol, terminals, tCount);
                
                if (idx != -1) {
                    strcpy(parsingTable[i][idx], grammar[j]);  // Fill the parsing table with the production
                }
                
                if (firstSymbol == '#') {
                    int followIdx = findIndex(nonTerminals[i], nonTerminals, ntCount);
                    for (int k = 0; follow[followIdx][k] != '\0'; k++) {
                        int terminalIdx = findIndex(follow[followIdx][k], terminals, tCount);
                        if (terminalIdx != -1) {
                            strcpy(parsingTable[i][terminalIdx], grammar[j]);
                        }
                    }
                }
            }
        }
    }
}

// Function to display the Parsing Table
void displayParsingTable(char parsingTable[][MAX_TERMINALS][MAX_RULES]) {
    cout << "\nParsing Table:\n";
    cout << "\t";
    // Display terminal symbols as column headers, including the '$' symbol
    for (int j = 0; j < tCount; j++) {
        if (terminals[j] == '$') {
            cout << "$\t";  // Display $ as a terminal
        } else {
            cout << terminals[j] << "\t";
        }
    }
    cout << endl;

    // Display non-terminal symbols as row headers
    for (int i = 0; i < ntCount; i++) {
        cout << nonTerminals[i] << "\t";  // Non-terminal name
        for (int j = 0; j < tCount; j++) {
            if (parsingTable[i][j][0] != '\0') {
                cout << parsingTable[i][j] << "\t";  // Production rule
            } else {
                cout << "\t";
            }
        }
        cout << endl;
    }
}

int main() {
    // Take the number of rules as input
    cout << "Enter the number of grammar rules: ";
    cin >> ruleCount;

    // Input the grammar rules
    cout << "Enter the production rules: " << endl;
    for (int i = 0; i < ruleCount; i++) {
        cin >> grammar[i];
    }

    // Identify non-terminals and terminals from grammar
    for (int i = 0; i < ruleCount; i++) {
        char lhs = grammar[i][0];
        if (findIndex(lhs, nonTerminals, ntCount) == -1) {
            nonTerminals[ntCount++] = lhs;
        }

        for (int j = 3; grammar[i][j] != '\0'; j++) {
            if (isTerminal(grammar[i][j]) && findIndex(grammar[i][j], terminals, tCount) == -1) {
                terminals[tCount++] = grammar[i][j];
            }
        }
    }

    // Add the $ symbol to the terminals (end-of-input marker)
    terminals[tCount++] = '$';

    // Compute FIRST and FOLLOW sets
    computeFirst();
    computeFollow();

    // Initialize the parsing table
    char parsingTable[MAX_NON_TERMINALS][MAX_TERMINALS][MAX_RULES] = {};

    // Fill the parsing table based on FIRST and FOLLOW sets
    fillParsingTable(parsingTable);

    // Display the parsing table
    displayParsingTable(parsingTable);

    return 0;
}
